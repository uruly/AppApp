//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleSecurityApplicationGroups {
      static let groupXyzUrulyAppapp = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.xyz.uruly.appapp") ?? "group.xyz.uruly.appapp"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 46 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `appapp_logo1.png`.
    static let appapp_logo1Png = Rswift.FileResource(bundle: R.hostingBundle, name: "appapp_logo1", pathExtension: "png")
    /// Resource file `backgroundImage.json`.
    static let backgroundImageJson = Rswift.FileResource(bundle: R.hostingBundle, name: "backgroundImage", pathExtension: "json")
    /// Resource file `big@2x.png`.
    static let big2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "big@2x", pathExtension: "png")
    /// Resource file `big@3x.png`.
    static let big3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "big@3x", pathExtension: "png")
    /// Resource file `blackTree.jpg`.
    static let blackTreeJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "blackTree", pathExtension: "jpg")
    /// Resource file `blackTree_thumb.jpg`.
    static let blackTree_thumbJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "blackTree_thumb", pathExtension: "jpg")
    /// Resource file `check.png`.
    static let checkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "check", pathExtension: "png")
    /// Resource file `check2@2x.png`.
    static let check22xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "check2@2x", pathExtension: "png")
    /// Resource file `check2@3x.png`.
    static let check23xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "check2@3x", pathExtension: "png")
    /// Resource file `collect@2x.png`.
    static let collect2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "collect@2x", pathExtension: "png")
    /// Resource file `collect@3x.png`.
    static let collect3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "collect@3x", pathExtension: "png")
    /// Resource file `colorData.json`.
    static let colorDataJson = Rswift.FileResource(bundle: R.hostingBundle, name: "colorData", pathExtension: "json")
    /// Resource file `dotSkyBlue.jpg`.
    static let dotSkyBlueJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "dotSkyBlue", pathExtension: "jpg")
    /// Resource file `dotSkyBlue_thumb.jpg`.
    static let dotSkyBlue_thumbJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "dotSkyBlue_thumb", pathExtension: "jpg")
    /// Resource file `edit_label.png`.
    static let edit_labelPng = Rswift.FileResource(bundle: R.hostingBundle, name: "edit_label", pathExtension: "png")
    /// Resource file `help.json`.
    static let helpJson = Rswift.FileResource(bundle: R.hostingBundle, name: "help", pathExtension: "json")
    /// Resource file `iphone.png`.
    static let iphonePng = Rswift.FileResource(bundle: R.hostingBundle, name: "iphone", pathExtension: "png")
    /// Resource file `left_arrow@2x.png`.
    static let left_arrow2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "left_arrow@2x", pathExtension: "png")
    /// Resource file `left_arrow@3x.png`.
    static let left_arrow3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "left_arrow@3x", pathExtension: "png")
    /// Resource file `list2@2x.png`.
    static let list22xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "list2@2x", pathExtension: "png")
    /// Resource file `list2@3x.png`.
    static let list23xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "list2@3x", pathExtension: "png")
    /// Resource file `list@2x.png`.
    static let list2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "list@2x", pathExtension: "png")
    /// Resource file `list@3x.png`.
    static let list3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "list@3x", pathExtension: "png")
    /// Resource file `logo.png`.
    static let logoPng = Rswift.FileResource(bundle: R.hostingBundle, name: "logo", pathExtension: "png")
    /// Resource file `logo2.png`.
    static let logo2Png = Rswift.FileResource(bundle: R.hostingBundle, name: "logo2", pathExtension: "png")
    /// Resource file `logo3.png`.
    static let logo3Png = Rswift.FileResource(bundle: R.hostingBundle, name: "logo3", pathExtension: "png")
    /// Resource file `order_app.png`.
    static let order_appPng = Rswift.FileResource(bundle: R.hostingBundle, name: "order_app", pathExtension: "png")
    /// Resource file `right_arrow@2x.png`.
    static let right_arrow2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "right_arrow@2x", pathExtension: "png")
    /// Resource file `right_arrow@3x.png`.
    static let right_arrow3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "right_arrow@3x", pathExtension: "png")
    /// Resource file `safari@2x.png`.
    static let safari2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "safari@2x", pathExtension: "png")
    /// Resource file `safari@3x.png`.
    static let safari3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "safari@3x", pathExtension: "png")
    /// Resource file `screenShot0.jpeg`.
    static let screenShot0Jpeg = Rswift.FileResource(bundle: R.hostingBundle, name: "screenShot0", pathExtension: "jpeg")
    /// Resource file `screenShot1.jpeg`.
    static let screenShot1Jpeg = Rswift.FileResource(bundle: R.hostingBundle, name: "screenShot1", pathExtension: "jpeg")
    /// Resource file `screenShot2.jpeg`.
    static let screenShot2Jpeg = Rswift.FileResource(bundle: R.hostingBundle, name: "screenShot2", pathExtension: "jpeg")
    /// Resource file `screenShot3.jpeg`.
    static let screenShot3Jpeg = Rswift.FileResource(bundle: R.hostingBundle, name: "screenShot3", pathExtension: "jpeg")
    /// Resource file `screenShot4.jpeg`.
    static let screenShot4Jpeg = Rswift.FileResource(bundle: R.hostingBundle, name: "screenShot4", pathExtension: "jpeg")
    /// Resource file `screenShot5.jpeg`.
    static let screenShot5Jpeg = Rswift.FileResource(bundle: R.hostingBundle, name: "screenShot5", pathExtension: "jpeg")
    /// Resource file `small@2x.png`.
    static let small2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "small@2x", pathExtension: "png")
    /// Resource file `small@3x.png`.
    static let small3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "small@3x", pathExtension: "png")
    /// Resource file `snowBeige.jpg`.
    static let snowBeigeJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "snowBeige", pathExtension: "jpg")
    /// Resource file `snowBeige_thumb.jpg`.
    static let snowBeige_thumbJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "snowBeige_thumb", pathExtension: "jpg")
    /// Resource file `snowTreeBig.png`.
    static let snowTreeBigPng = Rswift.FileResource(bundle: R.hostingBundle, name: "snowTreeBig", pathExtension: "png")
    /// Resource file `snowTreeBig_thumb.png`.
    static let snowTreeBig_thumbPng = Rswift.FileResource(bundle: R.hostingBundle, name: "snowTreeBig_thumb", pathExtension: "png")
    /// Resource file `tutorialMark@2x.png`.
    static let tutorialMark2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tutorialMark@2x", pathExtension: "png")
    /// Resource file `tutorialMark@3x.png`.
    static let tutorialMark3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tutorialMark@3x", pathExtension: "png")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "appapp_logo1", withExtension: "png")`
    static func appapp_logo1Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appapp_logo1Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "backgroundImage", withExtension: "json")`
    static func backgroundImageJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backgroundImageJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "big@2x", withExtension: "png")`
    static func big2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.big2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "big@3x", withExtension: "png")`
    static func big3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.big3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "blackTree", withExtension: "jpg")`
    static func blackTreeJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blackTreeJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "blackTree_thumb", withExtension: "jpg")`
    static func blackTree_thumbJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blackTree_thumbJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "check", withExtension: "png")`
    static func checkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.checkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "check2@2x", withExtension: "png")`
    static func check22xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.check22xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "check2@3x", withExtension: "png")`
    static func check23xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.check23xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "collect@2x", withExtension: "png")`
    static func collect2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.collect2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "collect@3x", withExtension: "png")`
    static func collect3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.collect3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "colorData", withExtension: "json")`
    static func colorDataJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.colorDataJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dotSkyBlue", withExtension: "jpg")`
    static func dotSkyBlueJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dotSkyBlueJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dotSkyBlue_thumb", withExtension: "jpg")`
    static func dotSkyBlue_thumbJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dotSkyBlue_thumbJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "edit_label", withExtension: "png")`
    static func edit_labelPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.edit_labelPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "help", withExtension: "json")`
    static func helpJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helpJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "iphone", withExtension: "png")`
    static func iphonePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iphonePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "left_arrow@2x", withExtension: "png")`
    static func left_arrow2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.left_arrow2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "left_arrow@3x", withExtension: "png")`
    static func left_arrow3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.left_arrow3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "list2@2x", withExtension: "png")`
    static func list22xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.list22xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "list2@3x", withExtension: "png")`
    static func list23xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.list23xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "list@2x", withExtension: "png")`
    static func list2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.list2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "list@3x", withExtension: "png")`
    static func list3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.list3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "logo", withExtension: "png")`
    static func logoPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.logoPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "logo2", withExtension: "png")`
    static func logo2Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.logo2Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "logo3", withExtension: "png")`
    static func logo3Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.logo3Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "order_app", withExtension: "png")`
    static func order_appPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.order_appPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "right_arrow@2x", withExtension: "png")`
    static func right_arrow2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.right_arrow2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "right_arrow@3x", withExtension: "png")`
    static func right_arrow3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.right_arrow3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "safari@2x", withExtension: "png")`
    static func safari2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.safari2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "safari@3x", withExtension: "png")`
    static func safari3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.safari3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "screenShot0", withExtension: "jpeg")`
    static func screenShot0Jpeg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.screenShot0Jpeg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "screenShot1", withExtension: "jpeg")`
    static func screenShot1Jpeg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.screenShot1Jpeg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "screenShot2", withExtension: "jpeg")`
    static func screenShot2Jpeg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.screenShot2Jpeg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "screenShot3", withExtension: "jpeg")`
    static func screenShot3Jpeg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.screenShot3Jpeg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "screenShot4", withExtension: "jpeg")`
    static func screenShot4Jpeg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.screenShot4Jpeg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "screenShot5", withExtension: "jpeg")`
    static func screenShot5Jpeg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.screenShot5Jpeg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "small@2x", withExtension: "png")`
    static func small2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.small2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "small@3x", withExtension: "png")`
    static func small3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.small3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "snowBeige", withExtension: "jpg")`
    static func snowBeigeJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.snowBeigeJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "snowBeige_thumb", withExtension: "jpg")`
    static func snowBeige_thumbJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.snowBeige_thumbJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "snowTreeBig", withExtension: "png")`
    static func snowTreeBigPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.snowTreeBigPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "snowTreeBig_thumb", withExtension: "png")`
    static func snowTreeBig_thumbPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.snowTreeBig_thumbPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tutorialMark@2x", withExtension: "png")`
    static func tutorialMark2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tutorialMark2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tutorialMark@3x", withExtension: "png")`
    static func tutorialMark3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tutorialMark3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 32 images.
  struct image {
    /// Image `appapp_logo1`.
    static let appapp_logo1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "appapp_logo1")
    /// Image `big`.
    static let big = Rswift.ImageResource(bundle: R.hostingBundle, name: "big")
    /// Image `blackTree.jpg`.
    static let blackTreeJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackTree.jpg")
    /// Image `blackTree_thumb.jpg`.
    static let blackTree_thumbJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackTree_thumb.jpg")
    /// Image `check2`.
    static let check2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "check2")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `collect`.
    static let collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "collect")
    /// Image `dotSkyBlue.jpg`.
    static let dotSkyBlueJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "dotSkyBlue.jpg")
    /// Image `dotSkyBlue_thumb.jpg`.
    static let dotSkyBlue_thumbJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "dotSkyBlue_thumb.jpg")
    /// Image `edit_label`.
    static let edit_label = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_label")
    /// Image `iphone`.
    static let iphone = Rswift.ImageResource(bundle: R.hostingBundle, name: "iphone")
    /// Image `left_arrow`.
    static let left_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "left_arrow")
    /// Image `list2`.
    static let list2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "list2")
    /// Image `list`.
    static let list = Rswift.ImageResource(bundle: R.hostingBundle, name: "list")
    /// Image `logo2`.
    static let logo2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo2")
    /// Image `logo3`.
    static let logo3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo3")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `order_app`.
    static let order_app = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_app")
    /// Image `right_arrow`.
    static let right_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "right_arrow")
    /// Image `safari`.
    static let safari = Rswift.ImageResource(bundle: R.hostingBundle, name: "safari")
    /// Image `screenShot0.jpeg`.
    static let screenShot0Jpeg = Rswift.ImageResource(bundle: R.hostingBundle, name: "screenShot0.jpeg")
    /// Image `screenShot1.jpeg`.
    static let screenShot1Jpeg = Rswift.ImageResource(bundle: R.hostingBundle, name: "screenShot1.jpeg")
    /// Image `screenShot2.jpeg`.
    static let screenShot2Jpeg = Rswift.ImageResource(bundle: R.hostingBundle, name: "screenShot2.jpeg")
    /// Image `screenShot3.jpeg`.
    static let screenShot3Jpeg = Rswift.ImageResource(bundle: R.hostingBundle, name: "screenShot3.jpeg")
    /// Image `screenShot4.jpeg`.
    static let screenShot4Jpeg = Rswift.ImageResource(bundle: R.hostingBundle, name: "screenShot4.jpeg")
    /// Image `screenShot5.jpeg`.
    static let screenShot5Jpeg = Rswift.ImageResource(bundle: R.hostingBundle, name: "screenShot5.jpeg")
    /// Image `small`.
    static let small = Rswift.ImageResource(bundle: R.hostingBundle, name: "small")
    /// Image `snowBeige.jpg`.
    static let snowBeigeJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "snowBeige.jpg")
    /// Image `snowBeige_thumb.jpg`.
    static let snowBeige_thumbJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "snowBeige_thumb.jpg")
    /// Image `snowTreeBig_thumb`.
    static let snowTreeBig_thumb = Rswift.ImageResource(bundle: R.hostingBundle, name: "snowTreeBig_thumb")
    /// Image `snowTreeBig`.
    static let snowTreeBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "snowTreeBig")
    /// Image `tutorialMark`.
    static let tutorialMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorialMark")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appapp_logo1", bundle: ..., traitCollection: ...)`
    static func appapp_logo1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appapp_logo1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "big", bundle: ..., traitCollection: ...)`
    static func big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.big, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blackTree.jpg", bundle: ..., traitCollection: ...)`
    static func blackTreeJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackTreeJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blackTree_thumb.jpg", bundle: ..., traitCollection: ...)`
    static func blackTree_thumbJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackTree_thumbJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check2", bundle: ..., traitCollection: ...)`
    static func check2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "collect", bundle: ..., traitCollection: ...)`
    static func collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.collect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dotSkyBlue.jpg", bundle: ..., traitCollection: ...)`
    static func dotSkyBlueJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dotSkyBlueJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dotSkyBlue_thumb.jpg", bundle: ..., traitCollection: ...)`
    static func dotSkyBlue_thumbJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dotSkyBlue_thumbJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_label", bundle: ..., traitCollection: ...)`
    static func edit_label(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_label, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iphone", bundle: ..., traitCollection: ...)`
    static func iphone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iphone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "left_arrow", bundle: ..., traitCollection: ...)`
    static func left_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list", bundle: ..., traitCollection: ...)`
    static func list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list2", bundle: ..., traitCollection: ...)`
    static func list2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo2", bundle: ..., traitCollection: ...)`
    static func logo2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo3", bundle: ..., traitCollection: ...)`
    static func logo3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_app", bundle: ..., traitCollection: ...)`
    static func order_app(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_app, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right_arrow", bundle: ..., traitCollection: ...)`
    static func right_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "safari", bundle: ..., traitCollection: ...)`
    static func safari(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.safari, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "screenShot0.jpeg", bundle: ..., traitCollection: ...)`
    static func screenShot0Jpeg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot0Jpeg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "screenShot1.jpeg", bundle: ..., traitCollection: ...)`
    static func screenShot1Jpeg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot1Jpeg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "screenShot2.jpeg", bundle: ..., traitCollection: ...)`
    static func screenShot2Jpeg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot2Jpeg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "screenShot3.jpeg", bundle: ..., traitCollection: ...)`
    static func screenShot3Jpeg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot3Jpeg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "screenShot4.jpeg", bundle: ..., traitCollection: ...)`
    static func screenShot4Jpeg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot4Jpeg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "screenShot5.jpeg", bundle: ..., traitCollection: ...)`
    static func screenShot5Jpeg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot5Jpeg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "small", bundle: ..., traitCollection: ...)`
    static func small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "snowBeige.jpg", bundle: ..., traitCollection: ...)`
    static func snowBeigeJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snowBeigeJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "snowBeige_thumb.jpg", bundle: ..., traitCollection: ...)`
    static func snowBeige_thumbJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snowBeige_thumbJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "snowTreeBig", bundle: ..., traitCollection: ...)`
    static func snowTreeBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snowTreeBig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "snowTreeBig_thumb", bundle: ..., traitCollection: ...)`
    static func snowTreeBig_thumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snowTreeBig_thumb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorialMark", bundle: ..., traitCollection: ...)`
    static func tutorialMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialMark, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 19 nibs.
  struct nib {
    /// Nib `AppCollectionViewCell`.
    static let appCollectionViewCell = _R.nib._AppCollectionViewCell()
    /// Nib `AppInfoCell`.
    static let appInfoCell = _R.nib._AppInfoCell()
    /// Nib `BackgroundColorViewCell`.
    static let backgroundColorViewCell = _R.nib._BackgroundColorViewCell()
    /// Nib `BackgroundImageCell`.
    static let backgroundImageCell = _R.nib._BackgroundImageCell()
    /// Nib `ColorBaseCell`.
    static let colorBaseCell = _R.nib._ColorBaseCell()
    /// Nib `ColorSetViewCell`.
    static let colorSetViewCell = _R.nib._ColorSetViewCell()
    /// Nib `DeleteViewCell`.
    static let deleteViewCell = _R.nib._DeleteViewCell()
    /// Nib `DetailAppInfoViewCell`.
    static let detailAppInfoViewCell = _R.nib._DetailAppInfoViewCell()
    /// Nib `DetailCommonViewCell`.
    static let detailCommonViewCell = _R.nib._DetailCommonViewCell()
    /// Nib `DetailMemoViewCell`.
    static let detailMemoViewCell = _R.nib._DetailMemoViewCell()
    /// Nib `HelpLinkCell`.
    static let helpLinkCell = _R.nib._HelpLinkCell()
    /// Nib `HelpViewCell`.
    static let helpViewCell = _R.nib._HelpViewCell()
    /// Nib `HowToViewCell`.
    static let howToViewCell = _R.nib._HowToViewCell()
    /// Nib `InfoTableViewCell`.
    static let infoTableViewCell = _R.nib._InfoTableViewCell()
    /// Nib `MemoCell`.
    static let memoCell = _R.nib._MemoCell()
    /// Nib `RGBSliderCell`.
    static let rgbSliderCell = _R.nib._RGBSliderCell()
    /// Nib `SelectionBarCell`.
    static let selectionBarCell = _R.nib._SelectionBarCell()
    /// Nib `StartViewCell`.
    static let startViewCell = _R.nib._StartViewCell()
    /// Nib `WelcomeViewCell`.
    static let welcomeViewCell = _R.nib._WelcomeViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AppCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.appCollectionViewCell) instead")
    static func appCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AppInfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.appInfoCell) instead")
    static func appInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appInfoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BackgroundColorViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.backgroundColorViewCell) instead")
    static func backgroundColorViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.backgroundColorViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BackgroundImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.backgroundImageCell) instead")
    static func backgroundImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.backgroundImageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ColorBaseCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.colorBaseCell) instead")
    static func colorBaseCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.colorBaseCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ColorSetViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.colorSetViewCell) instead")
    static func colorSetViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.colorSetViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DeleteViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deleteViewCell) instead")
    static func deleteViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deleteViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailAppInfoViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailAppInfoViewCell) instead")
    static func detailAppInfoViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailAppInfoViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailCommonViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailCommonViewCell) instead")
    static func detailCommonViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailCommonViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailMemoViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailMemoViewCell) instead")
    static func detailMemoViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailMemoViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HelpLinkCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.helpLinkCell) instead")
    static func helpLinkCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.helpLinkCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HelpViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.helpViewCell) instead")
    static func helpViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.helpViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HowToViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.howToViewCell) instead")
    static func howToViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.howToViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.infoTableViewCell) instead")
    static func infoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.infoTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MemoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.memoCell) instead")
    static func memoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.memoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RGBSliderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rgbSliderCell) instead")
    static func rgbSliderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rgbSliderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectionBarCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectionBarCell) instead")
    static func selectionBarCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectionBarCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StartViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.startViewCell) instead")
    static func startViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.startViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WelcomeViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.welcomeViewCell) instead")
    static func welcomeViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.welcomeViewCell)
    }
    #endif

    static func appCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppCollectionViewCell? {
      return R.nib.appCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppCollectionViewCell
    }

    static func appInfoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppInfoCell? {
      return R.nib.appInfoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppInfoCell
    }

    static func backgroundColorViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BackgroundColorViewCell? {
      return R.nib.backgroundColorViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BackgroundColorViewCell
    }

    static func backgroundImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BackgroundImageCell? {
      return R.nib.backgroundImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BackgroundImageCell
    }

    static func colorBaseCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColorBaseCell? {
      return R.nib.colorBaseCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorBaseCell
    }

    static func colorSetViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColorSetViewCell? {
      return R.nib.colorSetViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorSetViewCell
    }

    static func deleteViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeleteViewCell? {
      return R.nib.deleteViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeleteViewCell
    }

    static func detailAppInfoViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailAppInfoViewCell? {
      return R.nib.detailAppInfoViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailAppInfoViewCell
    }

    static func detailCommonViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailCommonViewCell? {
      return R.nib.detailCommonViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailCommonViewCell
    }

    static func detailMemoViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailMemoViewCell? {
      return R.nib.detailMemoViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailMemoViewCell
    }

    static func helpLinkCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HelpLinkCell? {
      return R.nib.helpLinkCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HelpLinkCell
    }

    static func helpViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HelpViewCell? {
      return R.nib.helpViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HelpViewCell
    }

    static func howToViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HowToViewCell? {
      return R.nib.howToViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HowToViewCell
    }

    static func infoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoTableViewCell? {
      return R.nib.infoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoTableViewCell
    }

    static func memoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MemoCell? {
      return R.nib.memoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MemoCell
    }

    static func rgbSliderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RGBSliderCell? {
      return R.nib.rgbSliderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RGBSliderCell
    }

    static func selectionBarCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionBarCell? {
      return R.nib.selectionBarCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionBarCell
    }

    static func startViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StartViewCell? {
      return R.nib.startViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StartViewCell
    }

    static func welcomeViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WelcomeViewCell? {
      return R.nib.welcomeViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WelcomeViewCell
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AppCollectionViewCell.validate()
      try _AppInfoCell.validate()
      try _BackgroundColorViewCell.validate()
      try _BackgroundImageCell.validate()
      try _ColorSetViewCell.validate()
    }

    struct _AppCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AppCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check2.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check2.png' is used in nib 'AppCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AppInfoCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AppInfoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppInfoCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check2.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check2.png' is used in nib 'AppInfoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BackgroundColorViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BackgroundColorViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BackgroundColorViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BackgroundColorViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check2.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check2.png' is used in nib 'BackgroundColorViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BackgroundImageCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BackgroundImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BackgroundImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BackgroundImageCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check2.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check2.png' is used in nib 'BackgroundImageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ColorBaseCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ColorBaseCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColorBaseCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorBaseCell
      }

      fileprivate init() {}
    }

    struct _ColorSetViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ColorSetViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColorSetViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorSetViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check.png' is used in nib 'ColorSetViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DeleteViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DeleteViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeleteViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeleteViewCell
      }

      fileprivate init() {}
    }

    struct _DetailAppInfoViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailAppInfoViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailAppInfoViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailAppInfoViewCell
      }

      fileprivate init() {}
    }

    struct _DetailCommonViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailCommonViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailCommonViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailCommonViewCell
      }

      fileprivate init() {}
    }

    struct _DetailMemoViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailMemoViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailMemoViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailMemoViewCell
      }

      fileprivate init() {}
    }

    struct _HelpLinkCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HelpLinkCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HelpLinkCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HelpLinkCell
      }

      fileprivate init() {}
    }

    struct _HelpViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HelpViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HelpViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HelpViewCell
      }

      fileprivate init() {}
    }

    struct _HowToViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HowToViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HowToViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HowToViewCell
      }

      fileprivate init() {}
    }

    struct _InfoTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InfoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoTableViewCell
      }

      fileprivate init() {}
    }

    struct _MemoCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MemoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MemoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MemoCell
      }

      fileprivate init() {}
    }

    struct _RGBSliderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RGBSliderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RGBSliderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RGBSliderCell
      }

      fileprivate init() {}
    }

    struct _SelectionBarCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SelectionBarCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionBarCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionBarCell
      }

      fileprivate init() {}
    }

    struct _StartViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StartViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StartViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StartViewCell
      }

      fileprivate init() {}
    }

    struct _WelcomeViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WelcomeViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WelcomeViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WelcomeViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "appapp_logo1.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appapp_logo1.png' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNavigationViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
